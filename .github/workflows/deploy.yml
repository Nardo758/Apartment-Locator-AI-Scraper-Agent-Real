name: Deploy to Supabase
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v2
        with:
          version: latest
      
      - name: Verify Supabase CLI
        run: |
          echo "Supabase CLI version:"
          supabase --version
          echo "Supabase CLI info:"
          supabase --help | head -10
      
      - name: Setup Supabase Auth
        run: |
          echo "Logging in to Supabase..."
          supabase login --token $SUPABASE_ACCESS_TOKEN
          echo "Creating project configuration without database connection..."
          
          # Create supabase config directory and config file manually
          mkdir -p .supabase
          cat > .supabase/config.toml << EOF
          project_id = "$SUPABASE_PROJECT_ID"
          
          [api]
          enabled = true
          port = 54321
          
          [db]
          port = 54322
          major_version = 15
          EOF
          
          # Set the linked project reference
          echo "$SUPABASE_PROJECT_ID" > .supabase/project-ref
          
          echo "Project configured for deployment (skipping database connection test)"
          
          # Verify configuration
          echo "Verifying project configuration..."
          if [ -f ".supabase/project-ref" ]; then
            PROJECT_REF_CONTENT=$(cat .supabase/project-ref)
            echo "‚úÖ Project reference set to: $PROJECT_REF_CONTENT"
          else
            echo "‚ùå Failed to set project reference"
            exit 1
          fi
      
      - name: Set environment secrets in Supabase
        if: env.SUPABASE_ACCESS_TOKEN != ''
        run: |
          echo "Syncing runtime secrets to Supabase environment..."
          supabase secrets set --env-file <(cat << 'EOF'
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          SUPABASE_URL=https://${{ secrets.SUPABASE_PROJECT_ID }}.supabase.co
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ENABLE_AI_PRICING=true
          ENABLE_FRONTEND_SYNC=true
          ENABLE_MARKET_INTELLIGENCE=true
          EOF
          )
      
      - name: Push DB (Optional)
        run: |
          echo "Attempting to push database migrations..."
          if supabase db push --include-all --non-interactive; then
            echo "‚úÖ Database migrations applied successfully"
          else
            echo "‚ö†Ô∏è Database push failed - continuing with function deployment"
            echo "This may be due to database connection issues or no migrations to apply"
          fi
        
      - name: Deploy Functions
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "supabase/functions" ]; then
            DEPLOYMENT_SUCCESS=0
            DEPLOYMENT_FAILURES=0
            
            for dir in supabase/functions/*; do
              [ -d "$dir" ] || continue
              fn=$(basename "$dir")
              echo "üöÄ Deploying function: $fn"
              
              if supabase functions deploy "$fn" --no-verify-jwt --project-ref "$SUPABASE_PROJECT_ID" | cat; then
                echo "‚úÖ Successfully deployed: $fn"
                ((DEPLOYMENT_SUCCESS++))
              else
                echo "‚ùå Failed to deploy: $fn"
                ((DEPLOYMENT_FAILURES++))
              fi
              echo "---"
            done
            
            echo "üìä Deployment Summary:"
            echo "  ‚úÖ Successful: $DEPLOYMENT_SUCCESS"
            echo "  ‚ùå Failed: $DEPLOYMENT_FAILURES"
            
            if [ $DEPLOYMENT_FAILURES -gt 0 ] && [ $DEPLOYMENT_SUCCESS -eq 0 ]; then
              echo "All function deployments failed"
              exit 1
            elif [ $DEPLOYMENT_FAILURES -gt 0 ]; then
              echo "Some functions failed to deploy, but continuing..."
            else
              echo "All functions deployed successfully!"
            fi
          else
            echo "supabase/functions directory not found" >&2
            exit 1
          fi
      
      - name: Verify deployed functions
        run: |
          echo "üìã Listing deployed functions..."
          if supabase functions list --project-ref "$SUPABASE_PROJECT_ID" | cat; then
            echo "‚úÖ Function verification completed"
          else
            echo "‚ö†Ô∏è Could not verify functions, but deployment may have succeeded"
          fi
