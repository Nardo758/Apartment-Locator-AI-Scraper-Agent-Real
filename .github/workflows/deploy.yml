name: Migrate and Deploy (Supabase)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options: [ 'production', 'staging' ]

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

jobs:
  validate-local-migrations:
    name: Validate migrations locally
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start local Supabase
      run: supabase start | cat

    - name: Apply migrations (local reset)
      run: supabase db reset --force | cat

    - name: Generate types (local)
      run: |
        mkdir -p types
        supabase gen types typescript --local > types/supabase.ts

    - name: Upload local artifacts
      uses: actions/upload-artifact@v4
      with:
        name: local-validation
        path: |
          types/supabase.ts
        retention-days: 7

  apply-remote-migrations:
    name: Apply migrations to remote
    runs-on: ubuntu-latest
    needs: validate-local-migrations
    environment: ${{ inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Select environment
      id: select-env
      shell: bash
      run: |
        if [ "${{ inputs.environment || 'production' }}" = "staging" ]; then
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD_STAGING }}" >> $GITHUB_ENV
        else
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD }}" >> $GITHUB_ENV
        fi

    - name: Link Supabase project
      run: supabase link --project-ref "$PROJECT_REF"

    - name: Compute DB URL (for backup)
      id: dburl
      shell: bash
      run: |
        if [ -n "${DB_PASSWORD}" ] && [ -n "${PROJECT_REF}" ]; then
          echo "db_url=postgresql://postgres:${DB_PASSWORD}@db.${PROJECT_REF}.supabase.co:5432/postgres?sslmode=require" >> $GITHUB_OUTPUT
        else
          echo "db_url=" >> $GITHUB_OUTPUT
        fi

    - name: Install PostgreSQL client
      if: steps.dburl.outputs.db_url != ''
      run: |
        sudo apt-get update -y
        sudo apt-get install -y postgresql-client

    - name: Pre-deploy backup (pg_dump)
      if: steps.dburl.outputs.db_url != ''
      env:
        DB_URL: ${{ steps.dburl.outputs.db_url }}
      run: |
        echo "Creating logical backup before migration..."
        pg_dump --no-owner --no-privileges --format=custom "$DB_URL" -f predeploy.backup
        tar -czf predeploy.backup.tar.gz predeploy.backup

    - name: Upload backup artifact
      if: steps.dburl.outputs.db_url != ''
      uses: actions/upload-artifact@v4
      with:
        name: predeploy-backup
        path: predeploy.backup.tar.gz
        retention-days: 14

    - name: Apply migrations (remote)
      env:
        DB_URL: ${{ steps.dburl.outputs.db_url }}
      shell: bash
      run: |
        set -euo pipefail
        echo "Applying remote migrations..."
        if supabase db push --non-interactive | cat; then
          echo "Remote migrations applied successfully."
        else
          echo "Migration failed. Attempting rollback from backup..." >&2
          if [ -f predeploy.backup ]; then
            pg_restore --clean --if-exists --no-owner --no-privileges -d "$DB_URL" predeploy.backup || true
          fi
          exit 1
        fi

  deploy-edge-functions:
    name: Deploy Edge Functions
    runs-on: ubuntu-latest
    needs: apply-remote-migrations
    environment: ${{ inputs.environment || 'production' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Select environment
      shell: bash
      run: |
        if [ "${{ inputs.environment || 'production' }}" = "staging" ]; then
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
        else
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
        fi

    - name: Link Supabase project
      run: supabase link --project-ref "$PROJECT_REF"

    - name: Set environment secrets in Supabase
      if: env.SUPABASE_ACCESS_TOKEN != ''
      run: |
        echo "Syncing runtime secrets to Supabase environment..."
        supabase secrets set --env-file <(cat << 'EOF'
        ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
        SUPABASE_URL=https://${PROJECT_REF}.supabase.co
        SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        ENABLE_AI_PRICING=true
        ENABLE_FRONTEND_SYNC=true
        ENABLE_MARKET_INTELLIGENCE=true
        EOF
        )

    - name: Deploy all functions
      shell: bash
      run: |
        set -euo pipefail
        if [ -d "supabase/functions" ]; then
          for dir in supabase/functions/*; do
            [ -d "$dir" ] || continue
            fn=$(basename "$dir")
            echo "Deploying function: $fn"
            supabase functions deploy "$fn" --no-verify-jwt | cat
          done
        else
          echo "supabase/functions directory not found" >&2
          exit 1
        fi

    - name: Verify deployed functions
      run: supabase functions list | cat

  generate-and-commit-types:
    name: Generate and commit TypeScript types
    runs-on: ubuntu-latest
    needs: apply-remote-migrations
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Select environment
      shell: bash
      run: |
        if [ "${{ inputs.environment || 'production' }}" = "staging" ]; then
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
        else
          echo "PROJECT_REF=${{ secrets.SUPABASE_PROJECT_ID }}" >> $GITHUB_ENV
        fi

    - name: Link Supabase project
      run: supabase link --project-ref "$PROJECT_REF"

    - name: Generate types (remote)
      run: |
        mkdir -p types
        supabase gen types typescript --project-id "${{ env.SUPABASE_PROJECT_ID }}" > types/supabase.ts

    - name: Commit types if changed
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "chore(types): update Supabase generated types [skip ci]"
        file_pattern: |
          types/supabase.ts

  notify:
    name: Notify status
    runs-on: ubuntu-latest
    needs: [validate-local-migrations, apply-remote-migrations, deploy-edge-functions, generate-and-commit-types]
    if: always()

    steps:
    - name: Report
      run: |
        echo "validate-local-migrations: ${{ needs.validate-local-migrations.result }}"
        echo "apply-remote-migrations: ${{ needs.apply-remote-migrations.result }}"
        echo "deploy-edge-functions: ${{ needs.deploy-edge-functions.result }}"
        echo "generate-and-commit-types: ${{ needs.generate-and-commit-types.result }}"
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          STATUS="Migrations(local:${{ needs.validate-local-migrations.result }}, remote:${{ needs.apply-remote-migrations.result }}) | Functions:${{ needs.deploy-edge-functions.result }} | Types:${{ needs.generate-and-commit-types.result }}"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"Supabase deploy: ${STATUS} (commit ${{ github.sha }})\"}" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi